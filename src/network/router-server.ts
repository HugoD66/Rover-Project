import * as net from 'net'; // Importation de la biblioth√®que pour la gestion des connexions r√©seau
import { Interpreter } from "../interpreter/interpreter"; // Importation de l'Interpreter pour ex√©cuter les commandes du rover
import { RouterUI } from "../interpreter/router-ui"; // Importation de la classe RouterUI pour g√©rer l'interface utilisateur via r√©seau
import { renderFullState } from "../interpreter/shared-ui-renderer"; // Importation de la fonction pour rendre l'√©tat complet du jeu

/**
 * La classe RouterServer g√®re les connexions r√©seau avec les clients,
 * √©coute les commandes envoy√©es par ces clients, et r√©pond avec l'√©tat actuel du rover et de la mission.
 */
export class RouterServer {
  private readonly host: string; // L'adresse IP du serveur
  private readonly port: number; // Le port du serveur
  private server: net.Server | null = null; // Instance du serveur, initialis√©e √† null

  /**
   * Constructeur du RouterServer.
   * 
   * @param host L'adresse de l'h√¥te o√π le serveur sera ex√©cut√©.
   * @param port Le port sur lequel le serveur √©coute.
   * @param interpreter L'interpr√©teur qui ex√©cute les commandes envoy√©es par les clients.
   */
  constructor(host: string, port: number, private interpreter: Interpreter) {
    this.host = host;
    this.port = port;
  }

  /**
   * D√©marre le serveur et commence √† √©couter les connexions sur l'h√¥te et le port sp√©cifi√©s.
   * Il cr√©e un serveur et g√®re les nouvelles connexions via la m√©thode `handleNewConnection`.
   */
  public start(): void {
    this.server = net.createServer((socket) => this.handleNewConnection(socket)); // Cr√©e un serveur et d√©finit le gestionnaire de connexions

    this.server.listen(this.port, this.host, () => {
      console.log(`RouterServer lanc√© sur ${this.host}:${this.port}`);
    });

    // Gestion des erreurs de serveur
    this.server.on('error', (err) => {
      console.error('Erreur au niveau du serveur :', err);
    });
  }

  /**
   * G√®re une nouvelle connexion de client.
   * 
   * @param socket La connexion du client.
   */
  private handleNewConnection(socket: net.Socket): void {
    const ui = new RouterUI(this.interpreter, socket); // Cr√©e une instance de RouterUI pour g√©rer l'interaction avec le client

    ui.log(`Nouvelle connexion depuis ${socket.remoteAddress}:${socket.remotePort}`); // Affiche l'adresse et le port du client
    ui.renderHelp(); // Affiche les commandes disponibles au client

    // G√®re les donn√©es re√ßues du client
    socket.on('data', (data) => this.handleData(data, ui));
    // G√®re la fermeture de la connexion
    socket.on('close', () => this.handleClose(socket, ui));
    // G√®re les erreurs sur la connexion
    socket.on('error', (err) => this.handleError(socket, err, ui));
  }

  /**
   * G√®re les donn√©es re√ßues d'un client. Ex√©cute la commande et affiche l'√©tat actuel du rover.
   * 
   * @param data Les donn√©es envoy√©es par le client.
   * @param ui L'interface utilisateur associ√©e √† la connexion.
   */
  private handleData(data: Buffer, ui: RouterUI): void {
    const message = data.toString().trim().toUpperCase(); // Traite le message re√ßu (transforme en majuscules)

    // Ex√©cute chaque caract√®re de la commande re√ßue, si elle est plus longue qu'un caract√®re
    if (message.length > 1) {
      for (let char of message) {
        this.executeCommand(char, ui);
      }
    } else {
      this.executeCommand(message, ui);
    }

    // R√©cup√®re l'√©tat actuel du rover et de la mission pour l'afficher
    const fullState = renderFullState(this.interpreter.getMissionControl());
    ui.log(`\nüì° Commande re√ßue du client : ${message}`);
    ui.log(JSON.stringify(fullState, null, 2)); // Affiche l'√©tat sous forme de cha√Æne JSON bien format√©e
  }

  /**
   * Ex√©cute une commande envoy√©e par le client.
   * 
   * @param message La commande √† ex√©cuter.
   * @param ui L'interface utilisateur associ√©e √† la connexion.
   */
  private executeCommand(message: string, ui: RouterUI): void {
    this.interpreter.executeCommand(message, ui); // Ex√©cute la commande via l'interpr√©teur
  }

  /**
   * G√®re la fermeture de la connexion avec le client.
   * 
   * @param socket La connexion qui a √©t√© ferm√©e.
   * @param ui L'interface utilisateur associ√©e √† la connexion.
   */
  private handleClose(socket: net.Socket, ui: RouterUI): void {
    ui.display(`Connexion ferm√©e avec ${socket.remoteAddress}:${socket.remotePort}`);
    this.stop(); // Arr√™te le serveur une fois la connexion ferm√©e
  }

  /**
   * G√®re les erreurs rencontr√©es sur une connexion avec le client.
   * 
   * @param socket La connexion qui a rencontr√© une erreur.
   * @param err L'erreur rencontr√©e.
   * @param ui L'interface utilisateur associ√©e √† la connexion.
   */
  private handleError(socket: net.Socket, err: Error, ui: RouterUI): void {
    ui.display(`Erreur sur la connexion ${socket.remoteAddress}:${socket.remotePort} : ${err.message}`);
  }

  /**
   * Arr√™te le serveur.
   * Cette m√©thode ferme la connexion serveur et arr√™te l'√©coute des connexions entrantes.
   */
  public stop(): void {
    if (this.server) {
      this.server.close(); // Ferme le serveur
    }
  }
}
