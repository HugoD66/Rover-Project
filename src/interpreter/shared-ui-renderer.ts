import { renderMapAscii } from "../rover/map/map-renderer";
import { MissionControl } from "../mission-control/mission-control";

/**
 * Fonction permettant de rendre l'√©tat complet de la mission, incluant la carte et la position du rover.
 * Elle g√©n√®re un rendu ASCII de la carte et fournit des informations sur l'orientation et la position du rover.
 * 
 * @param missionControl L'objet `MissionControl` qui g√®re l'√©tat de la mission et du rover.
 * @param showObstacles (optionnel) Bool√©en indiquant si les obstacles doivent √™tre affich√©s. Par d√©faut √† `true`.
 * 
 * @returns Une cha√Æne de caract√®res repr√©sentant l'√©tat complet du rover et de la mission.
 */
export function renderFullState(missionControl: MissionControl, showObstacles = true): string {
  // R√©cup√©ration de l'√©tat du rover et de la carte depuis MissionControl
  const roverState = missionControl.getRoverState();
  const map = missionControl.getMap();
  const obstacles = map.getObstacles();

  // R√©cup√©ration des dimensions de la carte
  const { width, height } = {
    width: map.getMapLimitX(),
    height: map.getMapLimitY(),
  };

  // Rendu de la carte en ASCII, avec ou sans les obstacles en fonction du param√®tre showObstacles
  const ascii = renderMapAscii(roverState, obstacles ?? [], { width, height }, showObstacles);

  // Construction de la cha√Æne de caract√®res qui r√©sume l'√©tat du rover et de la mission
  return [
    `üõ∏ Orientation du Rover : ${roverState.getOrientation()}`, // Affichage de l'orientation du rover
    `ü™ê Position du Rover : ${roverState.getActualPositions().toString()}`, // Affichage de la position du rover
    '',
    ascii // Rendu ASCII de la carte
  ].join('\n'); // Retourne l'ensemble des informations sous forme de cha√Æne
}
